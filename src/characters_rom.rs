/// The character "ROM", returns the 8x8 pixels drawing corresponding to each character.
/// Inspired by the AMSTRAD character set.
pub fn rom(character: &char) -> [u8; 8] {
    match character {
        ' ' => [0, 0, 0, 0, 0, 0, 0, 0],
        '!' => [0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00],
        '"' => [0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00],
        '#' => [0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00],
        '$' => [0x18, 0x3E, 0x58, 0x3C, 0x1A, 0x7C, 0x18, 0x00],
        '%' => [0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00],
        '&' => [0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00],
        '\'' => [0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00],
        '(' => [0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00],
        ')' => [0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00],
        '*' => [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00],
        '+' => [0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00],
        ',' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30],
        '-' => [0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00],
        '.' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],
        '/' => [0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00],
        '0' => [0x7C, 0xC6, 0xCE, 0xD6, 0xE6, 0xC6, 0x7C, 0x00],
        '1' => [0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00],
        '2' => [0x3C, 0x66, 0x06, 0x3C, 0x60, 0x66, 0x7E, 0x00],
        '3' => [0x3C, 0x46, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00],
        '4' => [0x18, 0x38, 0x58, 0x98, 0xFE, 0x18, 0x3C, 0x00],
        '5' => [0x7E, 0x62, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00],
        '6' => [0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00],
        '7' => [0x7E, 0x46, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x00],
        '8' => [0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00],
        '9' => [0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00],
        ':' => [0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00],
        ';' => [0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30],
        '<' => [0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00],
        '=' => [0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00],
        '>' => [0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00],
        '?' => [0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00],
        '@' => [0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x7C, 0x00],
        'A' => [0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x0],
        'B' => [0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x0],
        'C' => [0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x0],
        'D' => [0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x0],
        'E' => [0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x0],
        'F' => [0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x0],
        'G' => [0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0xC6, 0x7E, 0x0],
        'H' => [0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0],
        'I' => [0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x0],
        'J' => [0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x0],
        'K' => [0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x0],
        'L' => [0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x0],
        'M' => [0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x0],
        'N' => [0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x0],
        'O' => [0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x0],
        'P' => [0xFC, 0x66, 0x66, 0x78, 0x60, 0x60, 0xF0, 0x0],
        'Q' => [0x38, 0x6C, 0xC6, 0xC6, 0xDA, 0xCC, 0x76, 0x0],
        'R' => [0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE2, 0x0],
        'S' => [0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x0],
        'T' => [0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0],
        'U' => [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0],
        'V' => [0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0],
        'W' => [0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x0],
        'X' => [0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0xC6, 0x0],
        'Y' => [0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x0],
        'Z' => [0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x0],
        '[' => [0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00],
        '\\' => [0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00],
        ']' => [0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00],
        '~' => [0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00],
        '_' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
        '`' => [0x00, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00],
        'a' => [0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x0],
        'b' => [0xE0, 0xE0, 0x7C, 0x66, 0x66, 0x66, 0xBC, 0x0],
        'c' => [0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x0],
        'd' => [0x1C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x0],
        'e' => [0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x0],
        'f' => [0x1C, 0x36, 0x30, 0x78, 0x30, 0x30, 0x78, 0x0],
        'g' => [0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x7C],
        'h' => [0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x0],
        'i' => [0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x0],
        'j' => [0x02, 0x00, 0x0E, 0x06, 0x06, 0x66, 0x66, 0x3C],
        'k' => [0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x0],
        'l' => [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0],
        'm' => [0x00, 0x00, 0x6C, 0xFE, 0xD6, 0xD6, 0xC6, 0x0],
        'n' => [0x00, 0x00, 0xD8, 0x66, 0x66, 0x66, 0x66, 0x0],
        'o' => [0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x0],
        'p' => [0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0],
        'q' => [0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E],
        'r' => [0x00, 0x00, 0xD8, 0x6C, 0x60, 0x60, 0xF0, 0x0],
        's' => [0x00, 0x00, 0x3C, 0x60, 0x3C, 0x06, 0x7C, 0x0],
        't' => [0x30, 0x30, 0x7C, 0x30, 0x30, 0x36, 0x1C, 0x0],
        'u' => [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x0],
        'v' => [0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0],
        'w' => [0x00, 0x00, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x0],
        'x' => [0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x0],
        'y' => [0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x7C],
        'z' => [0x00, 0x00, 0x7E, 0x4C, 0x18, 0x30, 0x7E, 0x00],
        '\u{25AE}' => [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF],
        _ => [0, 0, 0, 0, 0, 0, 0, 0],
    }
}
